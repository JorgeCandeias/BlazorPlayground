@page "/todo"
@inject TodoService TodoService

<h1>Todo (@todos.Count(todo => !todo.IsDone))</h1>

@foreach (var todo in todos)
{
    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <div class="input-group-text">
                <input type="checkbox" checked="@todo.IsDone" onchange="@(async e => await HandleTodoDoneAsync(todo, (bool)e.Value))" />
            </div>
        </div>
        <input class="form-control" value="@todo.Title" onchange="@(async e => await HandleTodoTitleChangeAsync(todo, (string)e.Value))" />
    </div>
}

<input placeholder="Something todo" bind="@newTodo" />
<button onclick="@AddTodoAsync">Add Todo</button>

@functions {

    private Guid ownerKey = Guid.Empty;
    private LinkedList<TodoItem> todos = new LinkedList<TodoItem>();
    private Dictionary<Guid, LinkedListNode<TodoItem>> lookup = new Dictionary<Guid, LinkedListNode<TodoItem>>();
    private string newTodo;

    protected override async Task OnInitAsync()
    {
        // subscribe to updates for the current list
        await TodoService.SubscribeAsync(ownerKey, notification => InvokeAsync(() => HandleNotificationAsync(notification)));

        // get all items from the cluster
        foreach (var item in await TodoService.GetAllAsync(ownerKey))
        {
            lookup[item.Key] = todos.AddLast(item);
        }

        await base.OnInitAsync();
    }

    private async Task AddTodoAsync()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            // create a new todo
            var todo = new TodoItem
            {
                Key = Guid.NewGuid(),
                OwnerKey = ownerKey,
                IsDone = false,
                Title = newTodo
            };

            // add it to the cluster
            await TodoService.SetAsync(todo);

            // show it on the user interface and index it
            lookup[todo.Key] = todos.AddLast(todo);

            // reset the box
            newTodo = null;
        }
    }

    private Task HandleNotificationAsync(TodoNotification notification)
    {
        LinkedListNode<TodoItem> node;

        // was the item removed
        if (notification.Item == null)
        {
            if (lookup.TryGetValue(notification.ItemKey, out node))
            {
                todos.Remove(node);
                lookup.Remove(notification.ItemKey);
                StateHasChanged();
            }
            return Task.CompletedTask;
        }

        // was the item updated
        if (lookup.TryGetValue(notification.ItemKey, out node))
        {
            if (!node.Value.Equals(notification.Item))
            {
                lookup[notification.ItemKey] = todos.AddAfter(node, notification.Item);
                todos.Remove(node);
                StateHasChanged();
            }
            return Task.CompletedTask;
        }

        // the item was added
        lookup[notification.ItemKey] = todos.AddLast(notification.Item);
        StateHasChanged();

        return Task.CompletedTask;
    }

    private async Task HandleTodoDoneAsync(TodoItem item, bool isDone)
    {
        item.IsDone = isDone;

        await TodoService.SetAsync(item);
    }

    private async Task HandleTodoTitleChangeAsync(TodoItem item, string title)
    {
        item.Title = title;

        await TodoService.SetAsync(item);
    }
}